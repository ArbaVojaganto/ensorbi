* ensorbi
ensorbi is a mechanism to absorb your experience.

*THIS APPLICATION IS UNSTABLE!*

Alternatively, it is an application that manages static files, text files and tags as a network based on their reference relationships.

ensorbiはあなたの経験を吸収する仕組みです。

あるいは、静的ファイル、テキストファイル及びタグをそれらの参照関係によるネットワークとして管理するアプリケーションです。

[[./doc/ensorbi-demo-4.gif]]
[[https://arba-vojaganto.deno.dev][demo]]

** abstract

** last check environment
windows10
deno: 1.8.3

** setup

1. [[https://deno.land/manual/getting_started/installation][install of Deno]]
2. git clone of this repository


** usage

*** server start
#+BEGIN_SRC
$ deno run -A --unstable ./app/server/main.ts --http-server
#+END_SRC

*** bundle editor client script
#+BEGIN_SRC
$ deno bundle --unstable --config tsconfig.json ./app/editorPage/index.ts ./app/editorPage/index.bundle.js
#+END_SRC

*** bundle viewer client script
#+BEGIN_SRC
$ deno bundle --unstable --config tsconfig.json ./app/viewerPage/index.ts ./app/viewerPage/index.bundle.js
#+END_SRC


** advanced

** experimental
*** reconstruct referrers
#+BEGIN_SRC
$ deno run -A --unstable ./app/server/main.ts --reconstruct-referrers
#+END_SRC

*** viewer client deploy to "Deno Deploy"
**** setup
#+BEGIN_SRC
$ cd ${RepositoryRoot}
$ deno bundle --unstable --config tsconfig.json ./app/viewerPage/index.ts ./app/viewerPage/index.bundle.js
$ deno run -A --unstable ./app/server/main.ts --build-deno-deploy-project
$ vim ./build/viewer/index.html

  <script>
- remoteStorageURL = ""
+ remoteStorageURL = "https://raw.githubusercontent.com/${user-name}/${Repository-name}/${branch-name}/"
  </script>
#+END_SRC

**** bundle
#+BEGIN_SRC
$ deno run -A --unstable ./app/server/main.ts --build-deno-deploy-project
#+END_SRC

**** gitpush
Under =${RepositoryRoot}/build/viewer/=, the files required for the Git repository that works with =Deno Deploy= are generated.

push to any GitHub repository.


**** register entrypoint of Deno Deploy
link of "https://raw.githubusercontent.com/${user-name}/${Repository-name}/${branch-name}/main.ts"

**** access


** todo
*** abstractを書く


*** 対話型ビュー
****
グラフとはいつでもきりかえれるように
LINQを扱うような使いごこちでインタラクティブに絞りこんでいく

*** グラフ描画
**** canvasに書いてるのでsvgにおきかえてみる
**** ノードの種類によって見た目を区別できるようにする
**** グラフ内のノード変更時にグラフの描画が止まってしまう問題の解消
ちょっとずつネットワークに追加されていく様が反映されて欲しい
**** エッジの描画がノードよりも上に描画されてるので下にする

*** editor
**** ノード削除機能
**** ノードプロパティ更新機能
**** クエリを発効してネットワークのノードをフィルターできるようにする
**** VRM読みこみとなんかいい感じに馴染むUIの作成
ノード詳細は人立たせてメッセージウィンドウっぽくしたり
**** 表示中のノードを一定の順序で縦にならべるビューをつくる
作った順とか、最終更新順序、名前とか？


**** タグ検索
**** LatestUpdateNodeみたいなノードを組みこんでエントリーポイントノードにつける
**** イベント駆動に変える
デリゲートをやりとりするのをやめる
anyをやりとりしている気がするので、きちんと型を送る

*** viewer
**** 画像がひっぱってこれているか調査

*** build
**** 公開マーキングしたものだけを含んでviewerプロジェクトを生成できるようにしたい


** LICENSE
Each code and file is provided under a license written in "LICENSE", unless it is licensed on its own.  

Contributors need to agree that their contributions are subject to the licenses mentioned above.

各コードとファイルはそれ自体にライセンス表記がない限り、"LICENSE"で記述されたライセンスの元で提供されます。  

また、貢献者はその貢献が上述のライセンスに従うことに同意する必要があります。
